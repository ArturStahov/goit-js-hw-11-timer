{"version":3,"sources":["webpack:///./js/CountdownTimer.js","webpack:///./index.js"],"names":["CountdownTimer","clockUiRef","this","timerId","days","hours","mins","secs","UiDay","querySelector","UiHours","UiMins","UiSecs","isActive","start","targetDate","setInterval","curentDate","Date","now","Number","console","warn","stop","time","calculateTimer","updateClockUi","clearInterval","textContent","pad","value","String","padStart","Math","floor","refs","timerControl","document","inputDate","labelInputDate","timer","Timer","addEventListener","event","target","dataset","button","valueAsNumber","style","color"],"mappings":"2JAAqBA,E,WAEjB,WAAYC,GACRC,KAAKC,QAAU,KACfD,KAAKE,KAAO,EACZF,KAAKG,MAAQ,EACbH,KAAKI,KAAO,EACZJ,KAAKK,KAAO,EACZL,KAAKM,MAAQP,EAAWQ,cAAc,uBACtCP,KAAKQ,QAAUT,EAAWQ,cAAc,wBACxCP,KAAKS,OAASV,EAAWQ,cAAc,uBACvCP,KAAKU,OAASX,EAAWQ,cAAc,uBACvCP,KAAKW,UAAW,E,2BAGpBC,MAAA,SAAMC,GAAY,WACTb,KAAKW,WACNX,KAAKC,QAAUa,aAAY,WACvB,IAAIC,EAAaC,KAAKC,MACtB,GAAIC,OAAOL,GAAcK,OAAOH,GAG5B,OAFAI,QAAQC,KAAK,kEACb,EAAKC,OAGT,IAAIC,EAAOT,EAAaE,EACxB,EAAKJ,UAAW,EAChB,EAAKY,eAAeD,GACpB,EAAKE,kBAEN,O,EAIXH,KAAA,WACIrB,KAAKW,UAAW,EAChBc,cAAczB,KAAKC,SACnBD,KAAKM,MAAMoB,YAAc,KACzB1B,KAAKQ,QAAQkB,YAAc,KAC3B1B,KAAKS,OAAOiB,YAAc,KAC1B1B,KAAKU,OAAOgB,YAAc,M,EAG9BH,eAAA,SAAeD,GACX,IAAMK,EAAM,SAACC,GACT,OAAOC,OAAOD,GAAOE,SAAS,EAAG,MAErC9B,KAAKE,KAAOyB,EAAII,KAAKC,MAAMV,EAAO,QAClCtB,KAAKG,MAAQwB,EAAII,KAAKC,MAAOV,EAAO,MAAR,OAC5BtB,KAAKI,KAAOuB,EAAII,KAAKC,MAAOV,EAAO,KAAR,MAC3BtB,KAAKK,KAAOsB,EAAII,KAAKC,MAAOV,EAAO,IAAe,O,EAGtDE,cAAA,WACIxB,KAAKM,MAAMoB,YAAc1B,KAAKE,KAC9BF,KAAKQ,QAAQkB,YAAc1B,KAAKG,MAChCH,KAAKS,OAAOiB,YAAc1B,KAAKI,KAC/BJ,KAAKU,OAAOgB,YAAc1B,KAAKK,M,KCpDjC4B,EAAO,CACTC,aAAcC,SAAS5B,cAAc,kBACrCR,WAAYoC,SAAS5B,cAAc,YACnC6B,UAAWD,SAAS5B,cAAc,kCAClC8B,eAAgBF,SAAS5B,cAAc,iBAIrC+B,EAAQ,IAAIC,EAAMN,EAAKlC,YAoB7BkC,EAAKC,aAAaM,iBAAiB,SAjBP,SAACC,GACzB,GAAoC,iBAAhCA,EAAMC,OAAOC,QAAQC,OAA2B,CAChD,GAA6B,KAAzBX,EAAKG,UAAUR,MAEf,YADAU,EAAM1B,MAAMqB,EAAKG,UAAUS,eAG/BZ,EAAKI,eAAeX,YAAc,qBAClCO,EAAKI,eAAeS,MAAMC,MAAQ,MAEF,gBAAhCN,EAAMC,OAAOC,QAAQC,SACrBN,EAAMjB,OACNY,EAAKI,eAAeX,YAAc,cAClCO,EAAKI,eAAeS,MAAMC,MAAQ,c","file":"main.e2c35399602561ce1b3f.js","sourcesContent":["export default class CountdownTimer {\r\n\r\n    constructor(clockUiRef) {\r\n        this.timerId = null;\r\n        this.days = 0;\r\n        this.hours = 0;\r\n        this.mins = 0;\r\n        this.secs = 0;\r\n        this.UiDay = clockUiRef.querySelector('[data-value=\"days\"]');\r\n        this.UiHours = clockUiRef.querySelector('[data-value=\"hours\"]');\r\n        this.UiMins = clockUiRef.querySelector('[data-value=\"mins\"]');\r\n        this.UiSecs = clockUiRef.querySelector('[data-value=\"secs\"]');\r\n        this.isActive = false\r\n    }\r\n\r\n    start(targetDate) {\r\n        if (!this.isActive) {\r\n            this.timerId = setInterval(() => {\r\n                let curentDate = Date.now();\r\n                if (Number(targetDate) < Number(curentDate)) {\r\n                    console.warn(\"date entered is less than current!Enter current date!!!!!\")\r\n                    this.stop()\r\n                    return;\r\n                }\r\n                let time = targetDate - curentDate;\r\n                this.isActive = true;\r\n                this.calculateTimer(time);\r\n                this.updateClockUi();\r\n\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    stop() {\r\n        this.isActive = false\r\n        clearInterval(this.timerId);\r\n        this.UiDay.textContent = \"00\"\r\n        this.UiHours.textContent = \"00\"\r\n        this.UiMins.textContent = \"00\"\r\n        this.UiSecs.textContent = \"00\"\r\n    }\r\n\r\n    calculateTimer(time) {\r\n        const pad = (value) => {\r\n            return String(value).padStart(2, \"0\");\r\n        }\r\n        this.days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n        this.hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n        this.mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n        this.secs = pad(Math.floor((time % (1000 * 60)) / 1000));\r\n    }\r\n\r\n    updateClockUi() {\r\n        this.UiDay.textContent = this.days\r\n        this.UiHours.textContent = this.hours\r\n        this.UiMins.textContent = this.mins\r\n        this.UiSecs.textContent = this.secs\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n","import './styles.css';\r\nimport Timer from './js/CountdownTimer.js'\r\n\r\n\r\nconst refs = {\r\n    timerControl: document.querySelector('#timer-control'),\r\n    clockUiRef: document.querySelector('#timer-1'),\r\n    inputDate: document.querySelector('[data-input-date=\"input-date\"]'),\r\n    labelInputDate: document.querySelector('#label-input'),\r\n}\r\n\r\n// const targetDate = new Date('Oct 10, 2020').getTime()\r\nconst timer = new Timer(refs.clockUiRef);\r\n\r\n\r\nconst timerControlHandler = (event) => {\r\n    if (event.target.dataset.button === \"button-start\") {\r\n        if (refs.inputDate.value !== \"\") {\r\n            timer.start(refs.inputDate.valueAsNumber)\r\n            return\r\n        }\r\n        refs.labelInputDate.textContent = \"Enter the date!!!!\"\r\n        refs.labelInputDate.style.color = \"red\"\r\n    }\r\n    if (event.target.dataset.button === \"button-stop\") {\r\n        timer.stop();\r\n        refs.labelInputDate.textContent = \"Select date\"\r\n        refs.labelInputDate.style.color = \"black\"\r\n    }\r\n}\r\n\r\n\r\nrefs.timerControl.addEventListener('click', timerControlHandler);\r\n"],"sourceRoot":""}